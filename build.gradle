plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
    id 'checkstyle'
    id 'jacoco'
}

group = 'com.documentor'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    
    // JSON processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    
    // HTTP client for LLM API calls
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    
    // Code analysis libraries
    implementation 'com.github.javaparser:javaparser-core:3.25.8'
    implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.25.8'
    
    // Python AST parsing (using Jython or Python process)
    implementation 'org.python:jython-standalone:2.7.3'
    
    // CLI support
    implementation 'org.springframework.shell:spring-shell-starter:3.2.0'
    implementation 'info.picocli:picocli:4.7.5'
    implementation 'info.picocli:picocli-spring-boot-starter:4.7.5'
    
    // Markdown generation
    implementation 'com.vladsch.flexmark:flexmark-all:0.64.8'
    
    // Utilities
    implementation 'org.apache.commons:commons-lang3'
    implementation 'commons-io:commons-io:2.15.1'
    
    // Logging
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    
    // Configuration
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
    
    // Test containers for integration tests
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:testcontainers'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.90 // 90% coverage requirement
            }
        }
    }
}

checkstyle {
    toolVersion = '10.12.5'
    configFile = file("config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}

springBoot {
    mainClass = 'com.documentor.DocumentorApplication'
}

jar {
    enabled = false
}

bootJar {
    archiveFileName = 'documentor.jar'
    mainClass = 'com.documentor.DocumentorApplication'
    archiveClassifier = '' // This makes it the main artifact
}

// Create a fat jar task for distribution
task fatJar(type: Jar) {
    group = 'distribution'
    description = 'Create a fat JAR containing all dependencies'
    archiveClassifier = 'fat'
    archiveFileName = 'documentor-fat.jar'
    
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    
    manifest {
        attributes(
            'Main-Class': 'com.documentor.DocumentorApplication',
            'Implementation-Title': project.name,
            'Implementation-Version': project.version
        )
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Alternative shadow jar plugin configuration (commented out)
// To use shadow plugin instead, uncomment this and add plugin: id 'com.github.johnrengelman.shadow' version '8.1.1'
/*
shadowJar {
    archiveFileName = 'documentor-shadow.jar'
    mainClassName = 'com.documentor.DocumentorApplication'
    mergeServiceFiles()
}
*/

task runApp(type: JavaExec) {
    group = 'application'
    description = 'Run the Documentor application'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.documentor.DocumentorApplication'
    
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
    
    // Support for help command
    doFirst {
        if (project.hasProperty('help') || project.hasProperty('h')) {
            println """
            📚 Documentor - AI-Powered Code Documentation Generator
            ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
            
            Usage: gradlew runApp [-Pargs="command options"]
            
            🔍 Available Commands:
              analyze --project-path <path> [options]  : Analyze and generate documentation
              scan --project-path <path>              : Analyze project without generating docs
              validate-config [--config <path>]      : Validate configuration file
              status                                  : Show current application status
              info                                   : Show supported features and file types
              quick-start                           : Display quick start guide
              help                                  : Show command help (interactive mode)
            
            📊 Analyze Command Options:
              --project-path <path>      : Path to project directory (required)
              --config <path>           : Configuration file path (default: config.json)
              --generate-mermaid        : Generate Mermaid class diagrams (default: false)
              --mermaid-output <path>   : Output directory for diagrams (default: source dir)
            
            🚀 Examples:
              gradlew runApp -Pargs="analyze,--project-path,./my-project"
              gradlew runApp -Pargs="analyze,--project-path,./src,--generate-mermaid,true"
              gradlew runApp -Pargs="scan,--project-path,./my-project"
              gradlew runApp -Pargs="status"
            
            📦 Building:
              gradlew build              : Build the project
              gradlew fatJar            : Create fat JAR with all dependencies
              gradlew bootJar           : Create Spring Boot executable JAR
              gradlew test              : Run tests with coverage
            
            💡 Tip: Run without arguments to start interactive shell mode
            """
            throw new StopExecutionException("Help displayed")
        }
    }
}

// Task to display help without running the application
task helpInfo {
    group = 'help'
    description = 'Display help information'
    doLast {
        println """
        📚 Documentor - AI-Powered Code Documentation Generator
        ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
        
        🛠️ Build Tasks:
          gradlew build              : Build the project
          gradlew test               : Run tests with coverage
          gradlew fatJar            : Create fat JAR with all dependencies
          gradlew bootJar           : Create Spring Boot executable JAR
          gradlew checkstyleMain    : Check code style for main sources
          gradlew checkstyleTest    : Check code style for test sources
          gradlew jacocoTestReport  : Generate test coverage report
        
        🚀 Run Tasks:
          gradlew runApp            : Start interactive shell mode
          gradlew runApp -Phelp     : Show detailed command help
          gradlew runApp -Pargs="analyze,--project-path,./src" : Run specific command
        
        📦 Distribution:
          gradlew bootJar           : Create executable JAR (recommended)
          gradlew fatJar            : Create fat JAR with all dependencies
        
        🧪 Testing:
          gradlew test              : Run all tests
          gradlew test --info       : Run tests with detailed output
          gradlew jacocoTestCoverageVerification : Verify coverage meets requirements
        
        For command-specific help, run: gradlew runApp -Phelp
        """
    }
}