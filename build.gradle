plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
    id 'checkstyle'
    id 'jacoco'
}

group = 'com.documentor'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

// Minimal dependencies for reduced complexity
dependencies {
    // Essential Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.shell:spring-shell-starter:3.2.0'
    
    // Core analysis libraries only
    implementation 'com.github.javaparser:javaparser-core:3.25.8'
    implementation 'org.python:jython-standalone:2.7.3'
    
    // Essential utilities
    implementation 'com.vladsch.flexmark:flexmark-all:0.64.8'
    implementation 'commons-io:commons-io:2.15.1'
    
    // Configuration processing
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // Minimal testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

// Simplified test configuration
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// JaCoCo configuration - simplified
jacoco {
    toolVersion = "0.8.11"  // Updated to support Java 21
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80  // Reduced from 0.89 for less complexity
            }
        }
    }
}

checkstyle {
    toolVersion = '10.12.5'
    configFile = file("config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}

springBoot {
    mainClass = 'com.documentor.DocumentorApplication'
}

// Simplified JAR configuration
jar {
    enabled = false
}

bootJar {
    archiveFileName = 'documentor.jar'
    mainClass = 'com.documentor.DocumentorApplication'
}

// Simplified run configuration
task runApp(type: JavaExec) {
    group = 'application'
    description = 'Run the Documentor application'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.documentor.DocumentorApplication'
    
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
}

// Simple help task
task helpInfo {
    group = 'help'
    description = 'Display help information'
    doLast {
        println """
        ðŸ“š Documentor - Usage:
        gradlew runApp                 : Start interactive mode
        gradlew runApp -Pargs="help"   : Show detailed help
        gradlew build                  : Build project
        gradlew test                   : Run tests
        """
    }
}